#!/bin/bash
#
# Place any bash functions in here and they'll get loaded automatically.
# Remember to update the bash_funcs method with any new func. details and an
# example command showing any args if applicable.
#

# Prints any methods contained in this file, provides an easy go-to reference.
bashfuncs () {
  echo ''
  echo 'Bash Functions'
  echo '--------------'
  echo ''

  echo 'up       - Change up a directory N times (default: 1) e.g.'
  echo '           up 2'
  echo 'findhere - Find files in local dir with given glob e.g.'
  echo '           findhere "*.log"'
  echo 'findall  - Find all matching files on file system e.g.'
  echo '           findall "docker"'
  echo 'finddot  - Find all dotfile symlinks in the home folder'
  echo 'search   - Grep recursively for pattern in local dir e.g.'
  echo '           search "My Project"'
  echo 'rmds     - Recursively remove all .DS_Store files from local dir'
  echo 'dir      - Create a dir in the local dir and cd into it e.g.'
  echo '           dir newproject'
  echo 'manpdf   - Open man page as PDF without saving it anywhere e.g.'
  echo '           manpdf ls'
  echo 'zipit    - Zip a file in the local dir e.g.'
  echo '           zipit newproject'
  echo 'extract  - Extracts archived files / mounts disk images e.g.'
  echo '           extract newproject.zip'
  echo 'sshi     - SSH using the identity file ~/.ssh/id_rsa e.g.'
  echo '           sshi user@server.com'
  echo 'sedit    - Replace all instances of X with Y in file Z e.g.'
  echo '           sedit "hello" "ciao" myfile.txt'
  echo 'gblogs   - Display logs of current branch starting with the last'
  echo '           commit when the branch was created'
  echo 'launch   - Launches a Mac OS X application e.g.'
  echo '           launch calculator'
  echo 'openrepo - Opens the local dir git repo with $BROWSER'
  echo 'grmb     - Removes a git branch on the remote repository e.g.'
  echo '           grmb origin mybranch'
  echo 'refresh  - Performs a `git fetch --all --prune`, checks out $1, main or'
  echo '           master and pulls from the remote e.g.'
  echo '           refresh mybranch'
  echo 'loadenv  - Exports an ENV file into the current shell session'
  echo '           Provide a file path or it defaults to "./.env" e.g.'
  echo '           loadenv "../../.my_env"'
  echo 'lports   - List all open ports and their PIDs, use `kill <PID>` to close a port'

  echo ''
  echo 'Ubuntu Functions'
  echo '----------------'
  echo ''

  echo 'suspend - Suspend/hibernate the machine'
  echo 'rwifi   - Hard re-start/connect the WIFI adapter (useful for driver issues)'

  echo ''
}
alias shellfuncs=bashfuncs

up () {
  local n=${1:-1}
  for i in $(seq $n); do
    cd ..
  done
}

findhere () {
	find . -name "$1"
}

findall () {
  find / -name "$1"
}

finddot () {
	find ~ -name ".*" -maxdepth 1 -type l
}
alias finddots=finddot

search () {
  grep -rni "$1" .
}

rmds () {
  find . -name ".DS_Store" -type f -delete
}

dir () {
  mkdir "$1" && cd "$1"
}

manpdf () {
  man -t "$1" | open -f -a /Applications/Preview.app/
}

zipit () {
  zip -r "$1.zip" "$1"
}

# credit: http://nparikh.org/notes/zshrc.txt
extract () {
  if [ -f $1 ]; then
    case $1 in
      *.tar.bz2)  tar -jxvf $1                        ;;
      *.tar.gz)   tar -zxvf $1                        ;;
      *.bz2)      bunzip2 $1                          ;;
      *.dmg)      hdiutil mount $1                    ;;
      *.gz)       gunzip $1                           ;;
      *.tar)      tar -xvf $1                         ;;
      *.tbz2)     tar -jxvf $1                        ;;
      *.tgz)      tar -zxvf $1                        ;;
      *.zip)      unzip $1                            ;;
      *.ZIP)      unzip $1                            ;;
      *.pax)      cat $1 | pax -r                     ;;
      *.pax.Z)    uncompress $1 --stdout | pax -r     ;;
      *.rar)      unrar x $1                          ;;
      *.Z)        uncompress $1                       ;;
      *)          echo "'$1' cannot be extracted/mounted via extract()" ;;
    esac
  else
    echo "'$1' is not a valid file"
  fi
}

sshi () {
  ssh -i ~/.ssh/id_rsa $1
}
alias sushi='sshi'

sedit () {
  sed -ie "s/$1/$2/g" $3
}

gblogs () {
  git log --oneline --walk-reflogs "$(git rev-parse --abbrev-ref HEAD)"
}

launch () {
  open -a "$1.app"
}

openrepo () {
  local url=$(git remote -v | grep "origin" | awk 'FNR == 1 {print $2}')
  if [[ "$url" == *"git@"* ]]; then
    url=$(echo $url | sed "s|:|/|" | sed "s|git@|https://|")
  fi
  open $url
}

grmb () {
  git push $1 --delete $2
}

refresh () {
  local branch=${1:-"main"}
  git fetch --all --prune
  git checkout $branch || git checkout main || git checkout master
  if [ $? -eq 0 ]; then
    git pull
  fi
}

# $1 = main_branch, $2 = dev_branch
# Use like:
# local dev_branch="${2:-master}"
# _pull_repo "master" $dev_branch
_pull_repo() {
  gfap
  g stash | grep "No local changes to save"
  local stash_result="$?"

  printf "\nPulling main branch $1...\n"
  gch "$1"
  g pull

  if [ "$1" != "$2" ]; then
    printf "\nPulling dev branch $2...\n"
    gch "$2" && g pull
  fi

  if [ $stash_result -eq 1 ]; then
      g stash apply
  fi
}

loadenv () {
  local env_file=${1:-".env"}
  while read env_var; do
    export "$env_var"
  done < "$env_file"
}

lports () {
  lsof -i -P -n | grep LISTEN
}

# Ubuntu Functions

suspend () {
  systemctl suspend
}

rwifi () {
  nmcli radio wifi off
  sleep 1 # wait for 1 second before turning the adapter back on
  nmcli radio wifi on
}
