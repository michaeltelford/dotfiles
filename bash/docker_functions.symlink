#!/bin/bash
#
# Place any docker bash functions here and they'll get loaded automatically.
#
# Docker volumes will be stored locally in $VOLUMES (below).
# You should ensure this gets created in ./file_system/install.sh
#
# Any images requiring creds should use: $USERNAME and $PASSWORD where
# possible for consistency.
#

VOLUMES="$HOME/.v"
USERNAME=root
PASSWORD=pass

### Docker executable aliases/functions. ###

dp () {
  docker ps -a "${@}"
}

di () {
  docker images
}

ds () {
  echo "Searching..."
  docker search "${1}"
}

dn () {
  echo "Nuking..."
  docker rm -f `docker ps -aq` 2>/dev/null
  docker rm -v `docker ps --filter status=exited -q 2>/dev/null` 2>/dev/null
  docker rmi `docker images --filter dangling=true -q 2>/dev/null` 2>/dev/null
  docker volume rm $(docker volume ls -qf dangling=true)
}

dnv () {
  echo "Nuking volume dirs in $VOLUMES ..."
  local curdir=$(pwd -P)
  cd $VOLUMES
  rm -rf *
  cd $curdir
}

# Removes n number of the latest docker images (see `di` above)
# n defaults to 1 if no function param is provided.
drmi () {
  dn # Nuke all running containers.

  local i=0
  local max=${1:-1}

  for id in `docker images | awk '{print $3}'`; do
    if [ ! $id == "IMAGE" ]; then
      if [ $i == $max ]; then
        break
      fi
      docker rmi -f $id
      ((i++))
    fi
  done
}

dr () {
  echo "Running ${1}..."
  docker run --rm --name "${1}" "${1}"
}

dii () {
  docker image inspect "${1}"
}

dei () {
  local cmd=${2:-"bash"}
  docker exec -it ${1} $cmd
}

# Exports the entire container file system to the specified tar file.
deo () {
  docker export --output="${1}" ${2}
}

# Temp func to start and bash into a docker image based on `$(pwd)/Dockerfile`.
# It is assumed that the docker image name will be the same as the local dir name.
dapp () {
  local service=$(basename "$PWD")
  local cmd=${1:-"bash"}
  dn # docker nuke func (from above).
  docker rmi -f $service
  docker build -t $service . && \
    docker run --rm -it --name $service \
      -p 80:80 \
      -p 8080:8080 \
      -p 4567:4567 \
      -p 2300:2300 \
      -p 3000:3000 \
      -p 9292:9292 \
      -p 7000:7000 \
      -p 8000:8000 \
      $service $cmd
}

### Private helper methods. ###

# Simple wrapping method that follows a containers logs.
_docker_logwrap () {
  docker logs -f `$1`
}
# Starts any dependant image containers.
# Taken from: https://github.com/jfrazelle/dotfiles/blob/master/.dockerfunc
_docker_relieson () {
  local containers=$@

  for container in $containers; do
    local state=$(docker inspect --format "{{.State.Running}}" $container 2>/dev/null)

    if [[ "$state" == "false" ]] || [[ "$state" == "" ]]; then
      echo "$container is not running, starting it for you."
      $container
    fi
  done
}

### Image aliases/funcs, inspired by @jfrazelle ###

d_nginx () {
  if [ "${1}" = "l" ]; then _docker_logwrap "${FUNCNAME[0]}"; return; fi
  docker run \
    -p 80:80 \
    --name nginx \
    -v ${PWD}:/usr/share/nginx/html \
    -d \
    nginx
  echo "Running in daemon mode on port 80, serving the local directory"
  echo "HTML changes are reloaded automatically on page refresh"
}

d_postgres () {
  docker run \
    --name postgres \
    --rm \
    -e POSTGRES_PASSWORD=postgres \
    -v $VOLUMES/postgres/data:/var/lib/postgresql/data \
    -p 5432:5432 \
    -d \
    postgres
}

d_mysql () {
  if [ "${1}" = "l" ]; then _docker_logwrap "${FUNCNAME[0]}"; return; fi
  docker run \
    -p 3306:3306 \
    -e MYSQL_USER="$USERNAME" \
    -e MYSQL_ROOT_PASSWORD="$PASSWORD" \
    -v $VOLUMES/mysql/data:/var/lib/mysql \
    --name mysql \
    -d \
    mysql
}

d_mongo () {
  if [ "${1}" = "l" ]; then _docker_logwrap "${FUNCNAME[0]}"; return; fi
  docker run \
    -p 27017:27017 \
    -v $VOLUMES/mongodb/data:/data/db \
    --name mongo \
    -d \
    mongo
  _d_mongouser # Setup the root user (see func below)
}
_d_mongouser () {
  if [ "${1}" = "l" ]; then _docker_logwrap "${FUNCNAME[0]}"; return; fi
  docker exec \
    -it \
    mongo \
    mongo admin --eval "db.createUser({user: '$USERNAME', pwd: '$PASSWORD', roles:[{role:'root',db:'admin'}]});"
}

d_neo4j () {
  if [ "${1}" = "l" ]; then _docker_logwrap "${FUNCNAME[0]}"; return; fi
  docker run \
    -e NEO4J_AUTH=none \
    -p 7474:7474 \
    -p 7687:7687 \
    --name neo4j \
    -v $VOLUMES/neo4j/data:/data \
    -d \
    neo4j
}

d_elasticsearch () {
  if [ "${1}" = "l" ]; then _docker_logwrap "${FUNCNAME[0]}"; return; fi
  docker run -d \
    -e ES_JAVA_OPTS="-Xms1g -Xmx1g" \
    -p 9200:9200 \
    -p 9300:9300 \
    --name elasticsearch \
    -v $VOLUMES/elasticsearch/data:/usr/share/elasticsearch/data \
    -d \
    elasticsearch -E bootstrap.ignore_system_bootstrap_checks=true
}
